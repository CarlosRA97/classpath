GNU Classpath Unicode Attribute Database
----------------------------------------
java.lang.Character allows one to retrieve information on all 38,887
characters of the Unicode character set.  This is a lot of data.  The
database specification outlined here is meant to be fast, small, and
upgradable to new versions of the Unicode 3 specification (minus
Character.UnicodeBlock information) by running a script on the data
files that the Unicode Consortium distributes.

The database consists of three files:
1) character.uni (main database of character attributes)
2) block.uni (mappings from each block to offset in char file)
3) titlecase.uni (list of characters where titlecase differs from uppercase)

File sizes for Unicode 2.1.2 spec
---------------------------------
character.uni:  8760 bytes
block.uni    :  4122 bytes
titlecase.uni:    72 bytes

File sizes for Unicode 3.0.0 spec
---------------------------------
character.uni:  9776 bytes
block.uni    :  4938 bytes
titlecase.uni:    48 bytes

File sizes for Unicode 3.2.0 spec
---------------------------------
character.uni: 10784 bytes
block.uni    :  5586 bytes
titlecase.uni:    48 bytes

All quantities are unsigned unless otherwise specified.
All quantities are stored in big endian format.

character.uni
-------------
All characters in the Unicode specification have an attributes entry
in the character.uni file (alhough compression is used to share
entries where possible).  Characters are stored sequentially, based on
the Unicode character number within a block, although multiple blocks
may point to the same character attribute location.  There are no null
entries. Each entry consists of 8 bytes.  The file is limited to 4096
entries (32768 bytes), without making changes to the semantics of
block.uni.

C = Category (values correspond to constants in Character. For
     example, "Nd" maps to 9.)
N = Numerical Decimal Value: signed.  -1 if unused, -2 if not
     representable as nonnegative integer value, otherwise a
     non-negative value.  (For example, this is the decimal digit
     value of the category "Nd".  Note that Java also attaches a value
     to some sequences of 'a'-'z'; see Character.getNumericValue(char)
     for details.) In a compressed block, subsequent characters must
     adjust their value by their distance from the start of the block
     if the value is non-negative.
S = Non-breaking space (1/0)
U = Offset to uppercase mapping: signed. Characters with no mapping
     will have 0, which maps back to itself. Otherwise, the value of
     toUpperCase(ch) is (char) (ch - U).
L = Offset to lowercase mapping: signed. Characters with no mapping
     will have 0, which maps back to itself. Otherwise, the value of
     toLowerCase(ch) is (char) (ch - L).
D = Directional category: signed (Values correspond to constants in
     Character, with -1 meaning unassigned. For example, 'a' has
     direction "L", which maps to 0.)
M = Mirrored (1/0)
x = Empty

 xMSCCCCC   NNNNNNNN   NNNNNNNN   UUUUUUUU   UUUUUUUU
\________/ \________/ \________/ \________/ \________/
  byte 7     byte 6     byte 5     byte 4     byte 3

 LLLLLLLL   LLLLLLLL   DDDDDDDD
\________/ \________/ \________/
  byte 2     byte 1     byte 0

ranges of values

C = 0..30 (Sun skips 17, so that's what we do too)
N = -2..10000
D = -1..18

block.uni
---------
Characters within the Unicode specification tend to come in blocks --
sets of sequential characters.  The Classpath Unicode database takes
advantage of this property.  Each entry in the block.uni file consists
of 6 bytes.  Entries are stored sequentially, based on the Unicode
character number which starts a block.  If the compressed bit is set,
then offset O is the only entry for this block in the character.uni
file, and represents the attributes of all characters in the
block. Otherwise, the characters in the block occupy sequential
attributes, starting with character S at offset O.

S = Unicode character which represents start of block
E = Unicode character which represents end of block
O = Offset of this block within the character.uni file
C = Compressed (1/0) If compressed, all characters in the block share
     a common attribute, otherwise the characters in the block occupy
     sequential attributes starting at offset.

 SSSSSSSS   SSSSSSSS   EEEEEEEE   EEEEEEEE
\________/ \________/ \________/ \________/
  byte 5     byte 4     byte 3     byte 2

 COOOOOOO   OOOOOOOO
\________/ \________/
  byte 1     byte 0

titlecase.uni
-------------
Characters in which the titlecase differs from the uppercase are
stored in titlecase.uni.  There are only twelve characters in the
Unicode 3.0.0 specification which fit this description, and it's
doubtful that any others will ever be added to the specification.
However, we should be able to support more, without changing
java.lang.Character, and this is why we have not hardcoded these
values.  Each entry is 4 bytes.  Entries are stored sequentially,
based on the Unicode character number.

U = Unicode character which has a titlecase
T = Unicode mapping to titlecase

 UUUUUUUU   UUUUUUUU   TTTTTTTT   TTTTTTTT
\________/ \________/ \________/ \________/
  byte 3     byte 2     byte 1     byte 0
