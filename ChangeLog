2000-11-17  Tom Tromey  <tromey@cygnus.com>

	* java/util/PropertyPermission.java (actionStrings): Now `final'.
	(equals): New method.

2000-11-17  Mark Wielaard  <mark@klomp.org>

	Merge with libgcj (fixes by Anthony Green and Mark Wielaard)
	* java/util/jar/Attributes.java: Correct comment spelling.
	* java/util/jar/JarFile.java: Constructor that takes mode now
	calls super. Don't call java.util.zip.ZipFile.getEntry twice.

2000-11-16  Tom Tromey  <tromey@cygnus.com>

	Fixes for Java 2 compatibility:
	* java/util/Arrays.java (sort(byte[],int,int)): New method.
	(sort(char[],int,int)): Likewise.
	(sort(double[],int,int)): Likewise.
	(sort(float[],int,int)): Likewise.
	(sort(int[],int,int)): Likewise.
	(sort(long[],int,int)): Likewise.
	(sort(short[],int,int)): Likewise.

	Merged with libgcj:
	* java/io/PushbackReader.java (PushbackReader): Throw correct
	exception if buffer size not positive.
	(close): Reset buf.  Synchronize.
	(mark, reset): Minor changes to exception text.
	(ready): Throw exception if stream closed.  Synchronize.
	(skip): Indentation cleanup.  Fixed synchronization.
	(read): Fixed synchronization.  Throw exception if stream closed.
	Indentation cleanup.
	(read(char[],int,int)): Use libgcj implementation.
	(unread): Fixed synchronization, indentation.
	(unread(char[],int,int): Use libgcj implementation.

2000-11-17  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/util/Locale.java: Fix reformatting screw-up.

2000-11-16  Warren Levy  <warrenl@cygnus.com>

	* java/beans/PropertyChangeSupport.java (propertyListeners): Made
	transient.
	(listeners): Made transient.
	(source): Renamed from 'bean'.
	(children): New field for serialization.
	(propertyChangeSupportSerializedDataVersion): Ditto.
	(serialVersionUID): Ditto.
	(writeObject): New serialization method.
	(readObject): New serialization method.
	* java/beans/VetoableChangeSupport.java (propertyListeners): Made
	transient.
	(listeners): Made transient.
	(source): Renamed from 'bean'.
	(children): New field for serialization.
	(vetoableChangeSupportSerializedDataVersion): Ditto.
	(serialVersionUID): Ditto.
	(writeObject): New serialization method.
	(readObject): New serialization method.

2000-11-02  Warren Levy  <warrenl@cygnus.com>

	* java/io/ObjectInputStream.java (readObject): Added code to
	conditionally dump out the serialized data.
	Handle ENDBLOCKDATA case a bit more gracefully since the current
	behavior doesn't seem to work as expected.
	(readStreamHeader): Added code for serialized data dumper.
	(readNextBlock): Ditto.
	(readFields): Ditto.
	(dump): New private static field for turning on/off dumper.
	(setDump): New method.
	(dumpElement): New method.
	(dumpElementln): New method.

2000-11-03  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/util/AbstractList.java (SubList): Make it a top-level private
	class.
	* java/util/LinkedList.java (remove): Do update modCount and knownMod.
	(add): Ditto.

2000-11-02  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/util/AbstractList.java: Throw messages with 
	IndexOutOfBoundsExceptions.
	 (listIterator()): Call listIterator(0).
	(size): New field. Initialize to size().
	(hasNext): Test position against size, not size().
	(remove): Increment knownMod by one instead of resetting it from 
	modCount.
	(add): Ditto.
	(SubList.upMod): Removed.
	(SubList.set): Don't call upMod() or update knownMod.
	(SubList.add(int,Object)): Increment modCount instead of calling 
	upMod().
	(SubList.remove): Ditto.
	(SubList.addAll): Don't call backingList.size(). Increment size from 
	c.size().
	(SubList.iterator): New method. Call listIterator(0).
	(SubList.listIterator): New method. Restore code to return an 
	anonymous listIterator implementation (with some changes).
	* java/util/AbstractSequentialList.java: Throw messages with 
	IndexOutOfBoundsExceptions.
	(addAll): Add a specnote.
	* java/util/ArrayList.java (removeRange): Get the math right.
	(addAll): Increment modCount _before_ creating iterator.
	* java/util/LinkedList.java: Rewritten, mostly.
	
	* java/util/BitSet.java: Merged with libgcj implementation.
	* java/io/Reader.java: Ditto.
	* java/io/FileReader.java: Ditto.
	* java/io/StringReader.java: Ditto.

2000-10-29  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/util/AbstractCollection.java (addAll): Use size() instead of
	hasNext() in iterator loop.
	(clear): Ditto.
	(contains): Ditto. Simplify loop.
	(containsAll): Ditto.
	(remove): Ditto.
	(removeAll): Ditto.
	(retainAll): Ditto.
	(toArray): Ditto.
	(toString): Ditto. Use string concatenation operators, not
	StringBuffer.
	* java/util/AbstractList.java (addAll): Use size() instead of
	hasNext() in iterator loop.
	(equals): Ditto.
	(hashCode): Ditto.
	(indexOf): Ditto. Don't take null check outside of the loop.
	(iterator): Return an AbstractListItr instead of anonymous class.
	(lastIndexOf): Use a for loop bounded by size() instead of 
	hasPrevious() in iterator loop.
	(listIterator): Return an AbstractListItr.
	(removeRange): Remove bounds checking code and docs.
	(AbstractListItr): New inner class. Code moved here from 
	listIterator().
	(SubList.iterator): Removed. Use default implementation from 
	AbstractList instead.
	(SubList.listIterator): As above.
	* java/util/AbstractMap.java (clear): Use a for loop bounded by size() 
	instead of hasNext() in iterator loop.
	(containsValue): Ditto.
	(equals): Ditto.
	(get): Ditto.
	(put): Ditto.
	(putAll): Ditto.
	(remove): Ditto.
	(toString): Ditto. Use string concatenation operators, not
	StringBuffer.
	* java/util/AbstractSequentialList.java (addAll): Use a for loop 
	bounded by size() instead of hasNext() in iterator loop.
	* java/util/AbstractSet.java (hashCode): Don't catch exception as
	part of normal execution flow. Do an explicit null check instead.
	* java/util/ArrayList.java (_iSize): Rename to `size'.
	(_arData): Rename to `data'.
	(get): Check lower bounds also. Simplify IndexOutOfBoundsException
	message.
	(remove): Ditto.
	(removeRange): Make protected. Don't check bounds.
	(add): Check lower bounds also. Simplify IndexOutOfBoundsException
	message.
	(addAll (Collection)): Use a size-bounded for loop instead of hasNext() 
	check.
	(addAll (int, Collection)): Check lower bounds. Simplify exception
	string.
	(clone): Clone the data array too.
	(indexOf): Inline doesEqual().
	(lastIndexOf): Ditto.
	(clear): Don't set array data to null.
	(set): Check lower bounds. Simplify exception string.
	(toArray): Correct comment.
	(trimToSize): Don't update modCount, this is not a structural change.
	Add comment.

	* java/util/BitSet.java: Merged with classpath, new JDK 1.2 methods
	implemented.
	(toString): Declare `bit' as long, not int.
	(data): Made package-private, not private.

2000-10-27  Warren Levy  <warrenl@cygnus.com>

	* java/util/Calendar.java (toString): Always print fields.

2000-10-26  Warren Levy  <warrenl@cygnus.com>

	* java/math/BigDecimal.java (intVal): Renamed from 'num' for
	serialization compatibility.
	(scale): Made private.
	(serialVersionUID): New field.
	(main): Removed.
	* java/util/Calendar.java (bundleName): Use '.' separators instead
	of '/' in fully qualified class name.
	(getInstance): Made synchronized per doc.
	(getAvailableLocales): Made synchronized per doc.
	(getTimeInMillis): Made not a final method.
	(setTimeInMillis): Made protected rather than public final and
	recompute fields, per doc.
	(clear): Set areFieldsSet to false per spec and don't recompute fields.
	(isSet): Only return isSet[field] per spec.
	(complete): Check areFieldsSet before calling computeFields.
	(toString): Removed superfluous comma field.  Added areFieldsSet and
	print out "?" if time and/or fields[] values are invalid.
	* java/util/SimpleTimeZone.java (monthLength): New field.
	(serialVersionUID): New field.

2000-10-26  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/util/*.java: Fix indentation on copyright notices.
	* java/util/jar/*.java: Ditto.

2000-10-24  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/util/*.java: Reformat all to unofficial standard coding style. 
	No changes of substance.
	* java/util/jar/*.java: Ditto.
	
	* java/util/EventObject.java (toString): Corrected output.

	* java/lang/ThreadGroup.java (uncaughtException): Print thread name
	with stack dump. Set had_uncaught_exception.
	(had_uncaught_exception): New field. Refer to comment.

2000-10-10  Warren Levy  <warrenl@cygnus.com>

	* java/sql/Date.java (serialVersionUID): New field.
	* java/sql/Time.java (serialVersionUID): New field.
	* java/sql/Timestamp.java (serialVersionUID): New field.

2000-10-07  Tom Tromey  <tromey@cygnus.com>

	* java/util/Properties.java (addHashEntries): New method from
	libgcj.
	(propertyNames): Use libgcj implementation.
	(formatForOutput): Always quote spaces in key.

2000-10-05  Warren Levy  <warrenl@cygnus.com>

	* java/security/Key.java (serialVersionUID): New value.
	* java/security/Provider.java (serialVersionUID): New field.
	* java/security/interfaces/DSAPrivateKey.java (serialVersionUID):
	New value.
	* java/security/interfaces/DSAPublicKey.java (serialVersionUID):
        New value.
	* java/sql/DataTruncation.java (serialVersionUID): New field.
	* java/sql/SQLException.java (serialVersionUID): New field.
	* java/sql/SQLWarning.java (serialVersionUID): New field.
	* java/util/Date.java (writeObject): Renamed from incorrect name.

2000-09-08  Warren Levy  <warrenl@cygnus.com>

	* java/beans/PropertyChangeEvent.java (serialVersionUID): Added.
	* java/beans/PropertyVetoException.java (serialVersionUID): Added.
	* java/io/ObjectOutputStream.java (writeObject): Initialized
	fieldsAlreadyWritten before recursion rather than after.
	* java/io/ObjectStreamClass.java (serialVersionUID): Added.

2000-08-23  Mark Wielaard  <mark@klomp.org>

	* java/util/Collections.java (EMPTY_MAP) (singletonList(Object)
	(singletonMap(Object,Object)): implemented, new in 1.3.
	* java/io/PrintWriter.java (print(String)): Don't catch IOException,
	write(String) already does.
	* java/io/ByteArrayOutputStream.java: Fix from libgcj for double assignment
	of final variable initial_buffer_size.

2000-08-04  Tom Tromey  <tromey@cygnus.com>

	* java/io/StreamTokenizer.java (TT_NONE): Now private.
	(nextToken): Handle backslashed newline.  From Oskar Liljeblad.

2000-07-28  Weldon Washburn <weldon.washburn@intel.com>

	* java/lang/String.java (String(byte[],int,int,int)): Properly
	initialize `this.count'.

2000-07-27  Warren Levy  <warrenl@cygnus.com>

	* gnu/java/security/provider/SHA.java (munch): Reset buffer to 0 so
	spurious bits don't cause discrepancies.

2000-07-23  Oskar Liljeblad <osk@hem.passagen.se>

	* java/io/StreamTokenizer.java: Merged with libgcj.

2000-07-12  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/applet/*.java: Reformatted to match current coding style.

2000-06-29  Warren Levy  <warrenl@cygnus.com>

	* java/beans/PropertyChangeEvent.java (oldVal): Renamed to oldValue.
	(newVal): Renamed to newValue.
	* java/beans/PropertyVetoException.java (changeEvent): Renamed to evt.
	* java/beans/beancontext/BeanContextServiceRevokedEvent.java
	(revokeNow): Renamed to invalidateRefs.
	* java/io/ObjectOutputStream.java (writeObject): Use component type
	when writing arrays.
	Fixed typo.
	* java/io/WriteAbortedException.java (message): Made transient.

2000-06-29  Warren Levy  <warrenl@cygnus.com>

	* java/math/BigDecimal.java (add): Reimplemented.
	(subtract): Corrected method name from 'substract'.  Reimplemented.
	* java/sql/Connection.java (TRANSACTION_SERIALIZABLE): Corrected
	spelling to match JDK spec.
	* java/sql/DatabaseMetaData.java (getIdentifierQuoteString):
	Corrected method name from 'getIdentiferQuoteString'.
	(getTimeDateFunctions): Corrected name to match the spec.
	(supportsCatalogsInPrivilegeDefinitions): Ditto.
	(getMaxUserNameLength): Ditto.
	(getTables): Added String types[] parameter to match the spec.
	* java/sql/Driver.java (getMajorVersion): Corrected method name.
	* java/sql/PreparedStatement.java: Class extends Statement.
	(setBigDecimal): New method.
	(setAsciiStream): Added int length parameter.
	(setUnicodeStream): Ditto.
	(setBinaryStream): Ditto.
	(setCharacterStream): Ditto.
	(execute): New method.
	(executeQuery): New method.
	(executeUpdate): New method.

2000-06-28  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/lang/ThreadGroup.java: Added synchronized flag to many
	methods.
	(destroyed_flag): Removed.
	(isDestroyed, removeGroup, removeThread): Test for parent == null.
	(activeCount): Added spec note.
	
2000-06-20  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/lang/ThreadGroup.java: Merged with libgcj's ThreadGroup.

2000-06-18  Mark Wielaard <mark@klomp.org>

	* vm/reference/java/lang/Thread.java: yield() is static

2000-06-11  Mark Wielaard <mark@klomp.org>

	* java/util/jar/JarFile.java: new 1.2 class no entry verification yet
	* java/util/jar/JarInputStream.java: new 1.2 class no entry verification yet
	* java/util/jar/Manifest.java: import only Map, not Map.Entry
	workaround for gcj bug #254

2000-06-05  Mark Wielaard <mark@klomp.org>

	* java/util/jar/JarOutputStream.java: new 1.2 class

2000-06-04  Mark Wielaard <mark@klomp.org>

	* java/util/Timer.java: move all waiting logic into the queue as suggested
	by Jochen Hoenicke to prevent race conditions
	* java/lang/Makefile.am: add Package.java, ThreadLocal.java and
	InheritableThreadLocal.java
	* java/util/Makefile.am: add Timer.java, TimerTask.java and jar, zip dirs
	* java/util/jar/Attributes.java: new 1.2 class
	* java/util/jar/JarEntry.java: new 1.2 class
	* java/util/jar/JarException.java: new 1.2 class
	* java/util/jar/Manifest.java: new 1.2 class
	* configure.in: java/util/jar/Makefile and java/util/zip Makefile added

2000-05-30  Mark Wielaard <mark@klomp.org>

	* java/lang/ThreadLocal.java: new 1.2 class
	* java/lang/InheritableThreadLocal.java: new 1.2 class
	* vm/reference/java/lang/Thread.java: added example to use ThreadLocals
	* java/lang/Package.java: new 1.2 class (but no support in ClassLoader yet)
	* java/util/Timer.java: new 1.3 class
	* java/util/TimerTask.java: new 1.3 class
	* java/net/JarURLConnection.java: getCertificates returns a Certificate[]
	* java/security/ProtectionDomain.java: constructor should make the
	PermissionCollection read only

2000-05-15  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/lang/String.java (trim): Optimize `end' loop. Don't lose the 
	last character of the returned string. 

2000-05-10  Bryce McKinlay  <bryce@albatross.co.nz>

	* java/lang/StringBuffer.java (delete): Call arrayCopy() correctly.
	Avoid arrayCopy() call where possible. Update `count' _after_ calling
	arrayCopy().
	(replace): Reimplemented. Fix javadoc. 
	(reverse): Call ensureCapacity_unsynchronized().
	(StringBuffer (String)): Use DEFAULT_CAPACITY.

	(replace): Calculate length for arraycopy() correctly.
	
2000-05-09  Tom Tromey  <tromey@cygnus.com>

	Merged with libgcj:
	* java/lang/StringBuffer.java (toString): Don't mark buffer as
	shared.
	(insert(int,char[],int,int): New method.
	(delete): New method from Classpath.
	(deleteCharAt): Likewise.
	(substring): Likewise.
	(shared): No longer private.
	Added JavaDoc comments from Classpath.

2000-05-08  Tom Tromey  <tromey@cygnus.com>

	From Mark Wielaard <mark@klomp.org>:
	* gnu/java/awt/peer/gtk/GtkImagePainter.java: Added `package'
	statement.
	* gnu/java/awt/image/ImageDecoder.java: Deleted syntactically
	incorrect code from static block.
	* java/lang/String.java (String): Removed bogus text.

Sun May 10 13:33:17 1998  arenn's Development Account  <devel@larissa.foo.com>

	* First release.  See various directory specific change logs or
	the NEWS file for detail.

